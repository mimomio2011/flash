import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, CallbackQueryHandler, ConversationHandler
)
import pandas as pd

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_QUESTION, ADD_ANSWER = range(2)
REVIEW_CARD, SHOW_ANSWER = range(2)
EDIT_CHOOSE, EDIT_QUESTION, EDIT_ANSWER = range(3)

def edit_flashcard_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã"""
    user_id = update.effective_user.id
    user_cards = bot.get_user_cards(user_id)
    
    if user_cards.empty:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(f"{idx+1}. {row['question']}", callback_data=f"edit_{idx}")]
        for idx, row in user_cards.iterrows()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–ª–µ—à–∫–∞—Ä—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return EDIT_CHOOSE

def edit_flashcard_choose(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    card_idx = int(query.data.split('_')[1])
    context.user_data['edit_idx'] = card_idx
    
    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π):"
    )
    return EDIT_QUESTION

def edit_flashcard_question(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"""
    if update.message.text.lower() != '/skip':
        context.user_data['new_question'] = update.message.text
    
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π):"
    )
    return EDIT_ANSWER

def edit_flashcard_answer(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    card_idx = context.user_data['edit_idx']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    user_cards = bot.get_user_cards(user_id)
    card = user_cards.iloc[card_idx]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    new_question = context.user_data.get('new_question', card['question'])
    new_answer = update.message.text if update.message.text.lower() != '/skip' else card['answer']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ DataFrame - –í–ù–ò–ú–ê–ù–ò–ï –ù–ê –°–ö–û–ë–ö–ò!
    mask = ((bot.df['user_id'] == user_id) & 
            (bot.df['question'] == card['question']) & 
            (bot.df['answer'] == card['answer']))
    
    bot.df.loc[mask, ['question', 'answer']] = [new_question, new_answer]
    
    bot.save_flashcards()
    
    update.message.reply_text(
        "–§–ª–µ—à–∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {new_question}\n"
        f"–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {new_answer}"
    )
    return ConversationHandler.END

def about_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about"""
    about_text = """
<b>üìö Flashcard Bot</b> - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ—Ä–µ–π—Å–∫–∏—Ö —Å–ª–æ–≤

<u>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</u>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–ª–µ—à–∫–∞—Ä—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π

<u>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã 04.1-302 –ò–ú–û–ò–∏–í –ö–§–£:</u> 
–õ–æ–≥–∏–Ω–æ–≤–∞ –ú.–ê.
–ë–µ—Ä–µ–∑–∏–Ω–∞ –ê.–§.
–ê—Ö–º–µ—Ç–≤–∞–ª–∏–µ–≤–∞ –õ.–†.
–û—Ö–≤–∞—Ç –ê.–î.
–Æ—Å—É–ø–æ–≤–∞ –î.–§.
–ö–∏—Å–µ–ª–µ–≤–∞ –ï.–ï

    """
    update.message.reply_text(about_text, parse_mode='HTML', disable_web_page_preview=True)

DELETE_CHOOSE = range(1)

def delete_flashcard_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã"""
    user_id = update.effective_user.id
    user_cards = bot.get_user_cards(user_id)
    
    if user_cards.empty:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(f"{idx+1}. {row['question']}", callback_data=f"delete_{idx}")]
        for idx, row in user_cards.iterrows()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–ª–µ—à–∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return DELETE_CHOOSE

def delete_flashcard_confirm(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    query = update.callback_query
    query.answer()
    
    card_idx = int(query.data.split('_')[1])
    user_id = update.effective_user.id
    user_cards = bot.get_user_cards(user_id)
    card = user_cards.iloc[card_idx]
    
    # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    bot.df = bot.df[~(bot.df['user_id'] == user_id) & 
                   (bot.df['question'] == card['question']) & 
                   (bot.df['answer'] == card['answer'])]
    
    bot.save_flashcards()
    
    query.edit_message_text(
        f"–§–ª–µ—à–∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n–í–æ–ø—Ä–æ—Å: {card['question']}\n–û—Ç–≤–µ—Ç: {card['answer']}"
    )
    return ConversationHandler.END

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç
FLASHCARDS_FILE = 'flashcards.csv'

class FlashcardBot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame
        try:
            self.df = pd.read_csv(FLASHCARDS_FILE)
        except FileNotFoundError:
            self.df = pd.DataFrame(columns=['user_id', 'question', 'answer', 'category'])
    
    def save_flashcards(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã –≤ —Ñ–∞–π–ª"""
        self.df.to_csv(FLASHCARDS_FILE, index=False)
    
    def add_flashcard(self, user_id, question, answer, category='default'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ñ–ª–µ—à–∫–∞—Ä—Ç—É"""
        new_card = pd.DataFrame({
            'user_id': [user_id],
            'question': [question],
            'answer': [answer],
            'category': [category]
        })
        self.df = pd.concat([self.df, new_card], ignore_index=True)
        self.save_flashcards()
    
    def get_user_cards(self, user_id, category=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_cards = self.df[self.df['user_id'] == user_id]
        if category:
            user_cards = user_cards[user_cards['category'] == category]
        return user_cards
    
    def get_random_card(self, user_id, category=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ–ª–µ—à–∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_cards = self.get_user_cards(user_id, category)
        if not user_cards.empty:
            return user_cards.sample(1).iloc[0]
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = FlashcardBot()

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–∑—É—á–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–ª–µ—à–∫–∞—Ä—Ç—É\n"
        "/edit - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ–ª–µ—à-–∫–∞—Ä—Ç—É\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å —Ñ–ª–µ—à-–∫–∞—Ä—Ç—É\n"
        "/review - –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ–ª–µ—à–∫–∞—Ä—Ç\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–∏ —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã\n"
        "/categories - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
    )

def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    update.message.reply_text(
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–ª–µ—à-–∫–∞—Ä—Ç—É\n"
        "/edit - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ–ª–µ—à-–∫–∞—Ä—Ç—É\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å —Ñ–ª–µ—à-–∫–∞—Ä—Ç—É\n"
        "/review - –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ–ª–µ—à-–∫–∞—Ä—Ç\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ñ–ª–µ—à-–∫–∞—Ä—Ç—ã\n"
        "/categories - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã –≤ —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É–∫–∞–∑–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ |, –Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–æ–ø—Ä–æ—Å | –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ—Ç–≤–µ—Ç \n"
    )

def add_flashcard_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã"""
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–π —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã:"
    )
    return ADD_QUESTION

def add_flashcard_question(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    context.user_data['question'] = update.message.text
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:"
    )
    return ADD_ANSWER

def add_flashcard_answer(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç—É"""
    answer = update.message.text
    question = context.user_data['question']
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |)
    if '|' in question:
        question, category = [part.strip() for part in question.split('|', 1)]
    elif '|' in answer:
        answer, category = [part.strip() for part in answer.split('|', 1)]
    else:
        category = 'default'
    
    bot.add_flashcard(user_id, question, answer, category)
    update.message.reply_text(
        f"–§–ª–µ—à–∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–û—Ç–≤–µ—Ç: {answer}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
    )
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

def list_flashcards(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_cards = bot.get_user_cards(user_id)
    
    if user_cards.empty:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç.")
        return
    
    response = "–í–∞—à–∏ —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã:\n\n"
    for idx, row in user_cards.iterrows():
        response += f"{idx+1}. –í–æ–ø—Ä–æ—Å: {row['question']}\n–û—Ç–≤–µ—Ç: {row['answer']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['category']}\n\n"
    
    update.message.reply_text(response[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è

def list_categories(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_cards = bot.get_user_cards(user_id)
    
    if user_cards.empty:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç.")
        return
    
    categories = user_cards['category'].unique()
    response = "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n" + "\n".join(categories)
    update.message.reply_text(response)

def review_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç"""
    user_id = update.effective_user.id
    context.user_data['category'] = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã
    if bot.get_user_cards(user_id).empty:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories = bot.get_user_cards(user_id)['category'].unique()
    if len(categories) > 1:
        keyboard = [
            [InlineKeyboardButton(cat, callback_data=f"review_{cat}")] 
            for cat in categories
        ]
        keyboard.append([InlineKeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="review_all")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return REVIEW_CARD
    else:
        return show_next_card(update, context)

def review_category(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    category = query.data.split('_')[1]
    if category == 'all':
        context.user_data['category'] = None
    else:
        context.user_data['category'] = category
    
    query.edit_message_text(
        text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category if category != 'all' else '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}"
    )
    return show_next_card(update, context)

def show_next_card(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ñ–ª–µ—à–∫–∞—Ä—Ç—É"""
    user_id = update.effective_user.id
    category = context.user_data.get('category')
    
    card = bot.get_random_card(user_id, category)
    if card is None:
        if update.callback_query:
            update.callback_query.edit_message_text("–ù–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        else:
            update.message.reply_text("–ù–µ—Ç —Ñ–ª–µ—à–∫–∞—Ä—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        return ConversationHandler.END
    
    context.user_data['current_card'] = card.to_dict()
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            f"–í–æ–ø—Ä–æ—Å:\n\n{card['question']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="show_answer")]
            ])
        )
    else:
        update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å:\n\n{card['question']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="show_answer")]
            ])
        )
    
    return SHOW_ANSWER

def show_answer(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é —Ñ–ª–µ—à–∫–∞—Ä—Ç—É"""
    query = update.callback_query
    query.answer()
    
    card = context.user_data['current_card']
    
    query.edit_message_text(
        f"–í–æ–ø—Ä–æ—Å:\n\n{card['question']}\n\n"
        f"–û—Ç–≤–µ—Ç:\n\n{card['answer']}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {card['category']}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞", callback_data="next_card")]
        ])
    )
    
    return REVIEW_CARD

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("about", about_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("list", list_flashcards))
    dispatcher.add_handler(CommandHandler("categories", list_categories))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã
    add_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_flashcard_start)],
        states={
            ADD_QUESTION: [MessageHandler(Filters.text & ~Filters.command, add_flashcard_question)],
            ADD_ANSWER: [MessageHandler(Filters.text & ~Filters.command, add_flashcard_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dispatcher.add_handler(add_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã
    edit_handler = ConversationHandler(
        entry_points=[CommandHandler('edit', edit_flashcard_start)],
        states={
            EDIT_CHOOSE: [CallbackQueryHandler(edit_flashcard_choose, pattern="^edit_")],
            EDIT_QUESTION: [MessageHandler(Filters.text & ~Filters.command, edit_flashcard_question)],
            EDIT_ANSWER: [MessageHandler(Filters.text & ~Filters.command, edit_flashcard_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dispatcher.add_handler(edit_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç—ã
    delete_handler = ConversationHandler(
        entry_points=[CommandHandler('delete', delete_flashcard_start)],
        states={
            DELETE_CHOOSE: [CallbackQueryHandler(delete_flashcard_confirm, pattern="^delete_")],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dispatcher.add_handler(delete_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ñ–ª–µ—à–∫–∞—Ä—Ç
    review_handler = ConversationHandler(
        entry_points=[CommandHandler('review', review_start)],
        states={
            REVIEW_CARD: [
                CallbackQueryHandler(review_category, pattern="^review_"),
                CallbackQueryHandler(show_next_card, pattern="^next_card"),
            ],
            SHOW_ANSWER: [
                CallbackQueryHandler(show_answer, pattern="^show_answer"),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dispatcher.add_handler(review_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()